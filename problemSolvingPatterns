some common patterens:

Frequency counter 
multiple pointers
sliding window 
divide and conquer
cynamic programming 
greedy algorithms
backtracking
....many more 

#####################################
Frequency counter 

this pattern uses objects or sets to collect values/frequency of values 

this can often avoid nested loops or O(n^2) opperations
with arrays / strings 

usually is O(n)

Example 
write a function called "same", which accepts two arrays.

the function should reurn true if every value has its correspinding value squared in the second array.
the frequency of values must be the same

order does not matter 

same([1,2,3], [4,1,9]) //true
same([1,2,3], [1,9]) // false
same([1,2,1], [4,4,1]) // false 

const same = (arr, doubleArr) => {

}

i can find out if it is true by comparing to the answer


[1,2,3] =>pure function [1,4,9]

compare the length and the frequency 
this makes sure that there is nothing more than what i have 


const same = (arr, doubleArr) => {
    const arrHash = {};
    const doubleHash = {};

    if (arr.length !== doubleArr.length){
        return false;
    }

    arr = arr.map(char => char*char)

    for(let i = 0; i < arr.length; i++){
        if (arrHash[arr[i]]){
            arrHash += 1;
        }
        else(
            arrHash[arr[i]] = 1;
        )

        if (doubleHash[doubleArr[i]]){
            doubleHash += 1;
        }
        else(
            doubleHash[doubleArr[i]] = 1;
        )
    }

    for (const key in arrHash){
        if (arrHash[key] === doubleArr[key]){
            return false;
        }
    }

    return true
}
################################################
multiple pointers 

the obv and ineffecient answer would be to make two pointers and have 
a nested loop ...

if you need a multiple pointer for comparison:

use a pointer at the other end of the array 

if you need a first occurance of a value:

move j if it is not different from i 

if j is different 

i++ 
arr[i] = arr[j]
j++

.... you can use the arr as a storage for the numbers. 

###########################################################
sliding window 

you use a subarray in a bigger array and crawl the subarray throughout the big array to keep track of something. 

example :

function maxSubarraySum(arr, num){
  // add whatever parameters you deem necessary - good luck!
  
  if (arr.length < num){
      return null;
  }
  
    let total = 0;
    
    for(let i = 0; i < num; i++){
        total += arr[i];
    }
    
    let currentTotal = total;
    
    for(let z = num; z < arr.length; z++){
        currentTotal += arr[z] - arr[z-num];
        
        if (currentTotal > total){
            total = currentTotal;
        }
    }
    
    return total; 
}


miniSubArrayLens

function minSubArrayLen(nums, sum) {
  let total = 0;
  let start = 0;
  let end = 0;
  let minLen = Infinity;
 
  while (start < nums.length) {
    // if current window doesn't add up to the given sum then 
		// move the window to right
    if(total < sum && end < nums.length){
      total += nums[end];
			end++;
    }
    // if current window adds up to at least the sum given then
		// we can shrink the window 
    else if(total >= sum){
      minLen = Math.min(minLen, end-start);
			total -= nums[start];
			start++;
    } 
    // current total less than required total but we reach the end, need this or else we'll be in an infinite loop 
    else {
      break;
    }
  }
 
  return minLen === Infinity ? 0 : minLen;
}

#############################################################
recursion 

recursion is a function that works on an input and calls it self again till the input is at the smallest form. 
it then returns the results of each input and derives at an answer. 

eg, use recusion to find the answer of a factorial. 

factorials are:

4! => 4*3*2*1

const recurFactorial = (num) => {
    if(num === 1) return 1;
    num * recurFactorial(num-1)
}

This function will take a number and check to see if it is equal to 1
if not, it will try to multiply the number times the answer to the next call of the function 

the function will end up looking like:

(4 * (3 * (2 * (1)))

each bracket is a function call. 

pitfalls of recursion solutions


no base case (there is nothing to stop the recursion)

returning the wrong thing or forgetting to return something 
    make sure there is always work happening on the function call. 
    make sure to return something. there should be at least 2 returns in a recursion-- one in the if for the base case and one in the re-function call 

both of these things will cause stack overflow.

Helper method recursion 

in a helper method recusion you will have a function and in the function you will have another function that calls itself. 


const outer = (input) => {
    let outerVariable = []

    function helper(helperInput) {
        bascase{return base}
        helper (helperInput--)
    }

    helper(input)

    return outerVariable
}

helper method recursion is mostly used when a collection is needed during recursion 


pure recustion tips .. use slice spread or concat are used for collections

remember to call the helper function!!!!


function power(base, exponent) { 
    if (exponent === 1) return base;

    return base * power(base, exponent-1)
}

function flatten (oldArr){
    let newArr = []

    forloop (size of old arr){
        if (Array.isArray(oldArray)){
            newArr = newArr.concat(flatten(oldArr[i]))
        }else{
            newArr.push(oldArr[i])
        }

        return newArr;
    }
}

function stringifyNumbers(obj){
    
    for (const key in obj){
        if(typeof(obj[key]) === "object"){
            obj[key] = stringifyNumbers(obj[key]);
        }
        else if (typeof(obj[key]) === "number"){
            obj[key] += "";
        }
    }
    
    return obj;
}


//searching for a substring in a string;
//a better solution is the KNP algorithm

function subsetSearch(str, subStr){
    count = 0;

    for (let z = 0; z < str.length; z++){
        if (str[z] !== subStr[0]) continue;

        let match = true;

        for (let i = 1; i < subStr.length; i++){
            if (subStr[i] !== str[z + i]) {
                match = false;
                break;
            }
        }

        if (match){
            count +=1;
        }
        
    }

    return count;
}